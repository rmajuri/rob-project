{"version":3,"sources":["article.js","customInput.js","form.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","marginBottom","imageCard","backgroundColor","Article","id","name","link","description","image","deleteClickHandler","editClickHandler","classes","cardImage","CardMedia","component","alt","height","title","className","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","color","CardActions","href","target","rel","Button","size","onClick","CustomInput","field","form","touched","errors","props","Input","error","FormHelperText","initialState","padding","input","buttons","display","alignItems","justifyContent","header","margin","ArticleForm","articles","setArticles","isPost","setIsPost","selectedArticle","setSelectedArticle","find","article","formTitle","initialValues","enableReinitialize","onSubmit","values","actions","requestPost","fetch","method","headers","body","JSON","stringify","then","res","json","postResult","catch","err","console","setSubmitting","resetForm","requestPut","url","putResult","nonUpdatedArticles","filter","validationSchema","Yup","shape","max","required","isSubmitting","handleReset","FormGroup","InputLabel","htmlFor","type","disabled","App","useState","handleEditClick","articleId","handleDeleteClick","status","useEffect","articleResults","renderArticles","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4e5494a.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardMedia from '@material-ui/core/CardMedia'\n\nconst useStyles = makeStyles({\n    root: {\n        width: '80%',\n        marginBottom: '1rem'\n    },\n    imageCard: {\n        backgroundColor: '#D8D8D8'\n    }\n})\n\nconst Article = ({ id, name, link, description, image, deleteClickHandler, editClickHandler }) => {\n\n    const classes = useStyles()\n\n    // Only return an image componet if there is an image\n    const cardImage = !image ? null :\n        (\n            <CardMedia\n                component='img'\n                alt={description}\n                height='140'\n                image={image}\n                title={name}\n                className={classes.imageCard}\n            />)\n\n\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                {cardImage}\n                <CardContent>\n                    <Typography gutterBottom variant='h5' component='h2'>\n                        {name}\n                    </Typography>\n                    <Typography variant='body2' color='textSecondary' component='p'>\n                        {description}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <a href={link} target='_blank' rel='noreferrer'><Button size='small' color='primary'>\n                    Go to Article\n                </Button></a>\n                <Button size='small' color='primary' onClick={() => deleteClickHandler(id)}>\n                    Delete\n                </Button>\n                <Button size='small' color='primary' onClick={() => editClickHandler(id)}>\n                    Edit\n                </Button>\n            </CardActions>\n        </Card>\n    )\n\n}\n\nexport default Article","import React from 'react'\nimport { Input, FormHelperText } from '@material-ui/core'\n\nconst CustomInput = ({ field, form: { touched, errors }, ...props }) => (\n    <div>\n        <Input error={ !!(touched[field.name] && errors[field.name]) }\n            { ...field }\n            { ...props } />\n        {touched[field.name] && errors[field.name] && <FormHelperText>{errors[field.name]}</FormHelperText> }\n    </div>\n);\n\nexport default CustomInput","import './form.css'\nimport React, { Fragment } from 'react'\nimport * as Yup from 'yup'\nimport { Button, InputLabel, FormGroup } from '@material-ui/core'\nimport CustomInput from './customInput'\nimport { Formik, Form, Field } from 'formik'\nimport Card from '@material-ui/core/Card'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\n\n\nlet initialState = {\n    name: '',\n    link: '',\n    description: ''\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '35%',\n        marginBottom: '1rem',\n        padding: '.5rem'\n    },\n    input: {\n        width: '80%',\n        marginBottom: '1rem'\n    },\n    buttons: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%'\n    },\n    header: {\n        margin: '1rem 0 1rem 0'\n    }\n});\n\nconst ArticleForm = ({ articles, setArticles, isPost, setIsPost, selectedArticle, setSelectedArticle }) => {\n\n    const classes = useStyles();\n\n    if (!isPost) {\n        initialState = articles.find(article => article.id === selectedArticle)\n    } else {\n        initialState = {\n            name: '',\n            link: '',\n            description: ''\n        }\n    }\n    \n    // If we're in 'edit' mode, italicize to distinguish that\n    const formTitle = isPost ? 'Add a New Article' : `Edit ${(articles.find(article => article.id === selectedArticle).name)}`\n\n    const handleClearClick = () => {\n        if (!isPost) {\n            setIsPost(true)\n            setSelectedArticle(null)\n        }\n    }\n\n    return (\n        <Fragment>\n            <Formik initialValues={initialState}\n                enableReinitialize={true}\n                onSubmit={isPost ? (values, actions) => {\n                    const requestPost = {\n                        ...values\n                    };\n\n                    fetch('http://127.0.0.1:8000/api/articles/', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify(requestPost),\n                    })\n                        .then(res => res.json())\n                        .then(postResult => setArticles([...articles, postResult]))\n                        .catch((err) => console.error(err));\n\n                    actions.setSubmitting(false);\n                    actions.resetForm();\n                } :\n                    (values, actions) => {\n                        const requestPut = {\n                            ...values\n                        };\n\n                        const url = `http://127.0.0.1:8000/api/articles/${selectedArticle}/`\n\n                        fetch(url, {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify(requestPut),\n                        })\n                            .then(res => res.json())\n                            .then(putResult => {\n                                const nonUpdatedArticles = articles.filter(article => article.id !== selectedArticle)\n                                setArticles([...nonUpdatedArticles, putResult])\n                            })\n                            .catch((err) => console.error(err));\n\n                        setIsPost(true)\n                        setSelectedArticle(null)\n                        actions.setSubmitting(false);\n                        actions.resetForm();\n                    }\n\n                }\n                validationSchema={Yup.object().shape({\n                    name: Yup.string().max(60).required('Required'),\n                    link: Yup.string().max(2000).url().required('Required'),\n                    description: Yup.string().max(250).required('Required')\n                })}>\n                {\n                    ({ values, isSubmitting, handleReset }) => (\n                        <Fragment>\n                            <Card className={classes.root}>\n                                <Form>\n                                    <Typography className={classes.header} gutterBottom variant='h5' component='h2'>\n                                        {isPost ? formTitle : <i>{formTitle}</i>}\n                                    </Typography>\n                                    <FormGroup>\n                                        <InputLabel htmlFor='name'>Name</InputLabel>\n                                        <Field className={classes.input} name='name' type='text' component={CustomInput} />\n                                    </FormGroup>\n\n                                    <FormGroup>\n                                        <InputLabel htmlFor='link'>Link</InputLabel>\n                                        <Field className={classes.input} name='link' type='url' component={CustomInput} />\n                                    </FormGroup>\n\n                                    <FormGroup >\n                                        <InputLabel htmlFor='description'>Description</InputLabel>\n                                        <Field className={classes.input} name='description' type='text' component={CustomInput} />\n                                    </FormGroup>\n\n                                    <div className={classes.buttons}>\n                                        <div>\n                                            <Button type='reset' onClick={() => handleClearClick(handleReset)}>Clear</Button>\n                                        </div>\n\n                                        <div>\n                                            <Button type='submit' disabled={isSubmitting}>Submit</Button>\n                                        </div>\n                                    </div>\n                                </Form>\n                            </Card>\n                        </Fragment>\n                    )\n                }\n            </Formik>\n        </Fragment>);\n};\n\nexport default ArticleForm","import './App.css'\nimport Article from './article'\nimport ArticleForm from './form'\nimport React, { useState, useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nconst App = () => {\n  const [articles, setArticles] = useState([])\n  const [isPost, setIsPost] = useState(true)\n  const [selectedArticle, setSelectedArticle] = useState(null)\n\n  const handleEditClick = articleId => {\n    setIsPost(false)\n    setSelectedArticle(articleId)\n  }\n\n  const handleDeleteClick = articleId => {\n    const url = `http://127.0.0.1:8000/api/articles/${articleId}/`\n\n    fetch(url, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } })\n      .then(res => res.status)\n      .then(() => setArticles(articles.filter(article => article.id !== articleId)))\n      .catch(err => console.error(err))\n  }\n\n  useEffect(() => {\n    const fetchArticles = () => {\n      const url = 'http://127.0.0.1:8000/api/articles/'\n\n      fetch(url, { method: 'GET', headers: { 'Content-Type': 'application/json' } })\n        .then(res => res.json())\n        .then(articleResults => setArticles(articleResults))\n        .catch(err => console.error(err))\n    }\n\n    setArticles([])\n    fetchArticles()\n  }, [])\n\n  // Only return articles if there are any fetched\n  const renderArticles = articles.map(article => {\n    return <Article\n      key={article.id}\n      {...article}\n      deleteClickHandler={handleDeleteClick}\n      setIsPost={setIsPost}\n      selectedArticle={selectedArticle}\n      setSelectedArticle={setSelectedArticle}\n      editClickHandler={handleEditClick}\n    />\n  })\n\n\n  return (\n    <div className='App'>\n      <Typography variant='h4' component='header'>\n        News Tracker\n      </Typography>\n      <Typography gutterBottom variant='subtitle1' component='header'>\n        Curate a collection of news articles from around the web.\n      </Typography>\n      <div className='grid'>\n        <div>\n          {articles ? renderArticles : null}\n        </div>\n        <ArticleForm\n          isPost={isPost}\n          setIsPost={setIsPost}\n          articles={articles}\n          setArticles={setArticles}\n          selectedArticle={selectedArticle}\n          setSelectedArticle={setSelectedArticle}\n        />\n      </div>\n    </div>\n  )\n}\n\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}